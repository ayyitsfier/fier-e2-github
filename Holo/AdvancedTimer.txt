@name Timer
@persist Config:table Data:table

if(first())
{
    
    runOnChat(1)
    runOnLast(1)
    
    Config = table(
        "total_seconds" = 0
    )
    
    function timerHoloInit()
    {
        #holoDeleteAll()
        for(I=1, 8)
        {
            holoCreate(I)
            holoMaterial(I, "models/debug/debugwhite")
            holoDisableShading(I, 1)
            holoVisible(I, players(), 0)
        }
        
        holoModel(3, "models/sprops/misc/alphanum/alphanum_colon.mdl")
        holoModel(6, "models/sprops/misc/alphanum/alphanum_colon.mdl")
        
        holoPos(1, entity():toWorld(vec(0,35,35)))
        holoPos(2, entity():toWorld(vec(0,25,35)))
        holoPos(3, entity():toWorld(vec(0,15,35)))
        holoPos(4, entity():toWorld(vec(0,5,35)))
        holoPos(5, entity():toWorld(vec(0,-5,35)))
        holoPos(6, entity():toWorld(vec(0,-15,35)))
        holoPos(7, entity():toWorld(vec(0,-25,35)))
        holoPos(8, entity():toWorld(vec(0,-35,35)))
        
        holoAng(1, ang(0,90,0))
        holoAng(2, ang(0,90,0))
        holoAng(4, ang(0,90,0))
        holoAng(5, ang(0,90,0))
        holoAng(7, ang(0,90,0))
        holoAng(8, ang(0,90,0))
    }
    
    function timerHoloUpdate(Time:number)
    {
        timerHoloInit()
        for(I=1, 8)
        {
            holoVisible(I, players(), 1)
        }
        
        local Seconds = Time
        local Minutes = 0
        local Hours = 0
        
        if(Seconds >= 60)
        {
            Minutes = floor(Seconds / 60)
            Seconds = Seconds - (Minutes * 60)
            
            if(Minutes >= 60)
            {
                Hours = floor(Minutes / 60)
                Minutes = Minutes - (Hours * 60)
            }
        }
        
        local HourString = Hours:toString()
        local MinString = Minutes:toString()
        local SecString = Seconds:toString()
        
        if(HourString:length() == 1)
        {
            HourString = "0" + HourString
        }
        
        if(MinString:length() == 1)
        {
            MinString = "0" + MinString
        }
        
        if(SecString:length() == 1)
        {
            SecString = "0" + SecString
        }
        
        # Update the holo model
        # Hour
        holoModel(1, "models/sprops/misc/alphanum/alphanum_"+HourString:sub(1,1)+".mdl")
        holoModel(2, "models/sprops/misc/alphanum/alphanum_"+HourString:sub(2,2)+".mdl")
        
        # Minute
        holoModel(4, "models/sprops/misc/alphanum/alphanum_"+MinString:sub(1,1)+".mdl")
        holoModel(5, "models/sprops/misc/alphanum/alphanum_"+MinString:sub(2,2)+".mdl")
        
        # Second
        holoModel(7, "models/sprops/misc/alphanum/alphanum_"+SecString:sub(1,1)+".mdl")
        holoModel(8, "models/sprops/misc/alphanum/alphanum_"+SecString:sub(2,2)+".mdl")
    }
    
    function timerStart()
    {
        if(Config["total_seconds", number]>0)
        {
            Data["time", number] = Config["total_seconds", number]
            Data["countdown", number] = 3
            timerHoloUpdate(Data["time", number])
            
            setName("Timer / Starting")
            
            timer("starttimer", 1000)
        }
        else
        {
            hint("Timer is not set properly. Command: !tset", 6)
        }
    }
    
    function timerPause()
    {
        if(Data["started", number]==1)
        {
            stoptimer("second")
            hint("Timer has been paused", 6)
            
            setName("Timer / Paused")
        }
        else
        {
            hint("Timer hasn't started yet, cannot manipulate. Command: !tstart", 6)
        }
    }
    
    function timerResume()
    {
        if(Data["started", number]==1)
        {
            timer("second", 1000)
            hint("Timer has been resumed", 6)
            
            setName("Timer / Ongoing")
        }
        else
        {
            hint("Timer hasn't started yet, cannot manipulate. Command: !tstart", 6)
        }
    }
    
    function timerStop()
    {
        stoptimer("second")
        timerHoloInit()
        Data["time", number] = 0
        Config["total_seconds", number] = 0
        
        setName("Timer")
    }
    
    function timerReset()
    {
        stoptimer("second")
        reset()
    }
    
    Data["started", number] = 0
    timerHoloInit()
}

if(last())
{
    holoDeleteAll()
}

if(clk("second"))
{
    timer("second", 1000)
    Data["time", number] = Data["time", number] - 1
    if(Data["time", number] <= 0)
    {
        stoptimer("second")
        hint("Timer has reached 0 seconds", 6)
        entity():soundPlay("timesup", soundDuration("error.wav"), "error.wav")
        Data["started", number] = 0
        
        setName("Timer / Stopped")
        
    }
    
    if(Data["time", number] > 0 && Data["time", number] <= 15)
    {
        entity():soundPlay("tick", soundDuration("buttons/lightswitch2.wav"), "buttons/lightswitch2.wav")
    }
    timerHoloUpdate(Data["time", number])
}

if(clk("starttimer"))
{
    timer("starttimer", 1000)
    if(Data["countdown", number] <= 0)
    {
        stoptimer("starttimer")
        timer("second", 1000)
        Data["started", number] = 1
        hint("Timer has started", 6)
        entity():soundPlay("timestart", soundDuration("buttons/bell1.wav"), "buttons/bell1.wav")
        setName("Timer / Ongoing")
    }
    else
    {
        entity():soundPlay("countdown", soundDuration("buttons/blip1.wav"), "buttons/blip1.wav")
    }
    
    Data["countdown", number] = Data["countdown", number] - 1
}

if(chatClk(owner()))
{
    local LS = owner():lastSaid():lower():explode(" ")
    local Cmd = LS[1, string]
    
    if(Cmd == "!tset")
    {
        hideChat(1)
        if(Data["started", number]==0)
        {
            if(LS[2, string]:find("s"))
            {
                local Time = (LS[2, string]:replace("s", "")):toNumber()
                
                if(Time>0)
                {
                    Config["total_seconds", number] = Time
                    timerHoloUpdate(Config["total_seconds", number])
                    hint("Timer set for "+Time+" seconds", 6)
                    
                    setName("Timer / Set")
                    entity():soundPlay("wevebeenset", soundDuration("buttons/light_power_on_switch_01.wav"), "buttons/light_power_on_switch_01.wav")
                }
                else
                {
                    hint("Amount given not within time restriction (> 0)", 6)
                }
            }
            elseif(LS[2, string]:find("h"))
            {
                local Time = LS[2, string]:replace("h", ""):toNumber() * 3600
                
                if(Time>0)
                {
                    Config["total_seconds", number] = Time
                    timerHoloUpdate(Config["total_seconds", number])
                    hint("Timer set for "+(Time / 3600)+" hours", 6)
                    
                    setName("Timer / Set")
                    entity():soundPlay("wevebeenset", soundDuration("buttons/light_power_on_switch_01.wav"), "buttons/light_power_on_switch_01.wav")
                }
            }
            else
            {
                if(LS[2, string]:toNumber()>0 && LS[2, string]:toNumber()<=99)
                {
                    local Time = LS[2, string]:toNumber() * 60
                    Config["total_seconds", number] = Time
                    timerHoloUpdate(Config["total_seconds", number])
                    hint("Timer set for "+(Time / 60)+" minutes", 6)
                    
                    setName("Timer / Set")
                    entity():soundPlay("wevebeenset", soundDuration("buttons/light_power_on_switch_01.wav"), "buttons/light_power_on_switch_01.wav")
                }
                else
                {
                    hint("Amount given not within time restriction (> 0 and <= 99", 6)
                }
            }
        }
    }
    
    if(Cmd == "!tstart") { hideChat(1) timerStart() }
    if(Cmd == "!tpause") { hideChat(1) timerPause() }
    if(Cmd == "!tresume") { hideChat(1) timerResume() }
    if(Cmd == "!tstop" || Cmd == "!tclear") { hideChat(1) timerStop() }
    if(Cmd == "!treset") { hideChat(1) timerReset() }

    if(Cmd == "!tdebug") 
    {
        local Index = LS[2, string]:toNumber()
        if(Index >= 1 && Index <= 5)
        {
            owner():plySetPos(holoEntity(Index):pos())
        }
    }
}
